  // Handle user typing status
  socket.on("typing", (data) => {
    try {
      const { chatId, userId, isTyping } = data;
      // Broadcast typing status to other users in the chat
      socket.to(chatId).emit("user_typing", { userId, isTyping });
    } catch (error) {
      console.error(`Error with typing status:`, error);
    }
  });

  // Handle ping (for testing connection)
  socket.on("ping", (callback) => {
    console.log(`Received ping from ${socket.id}`);
    if (typeof callback === 'function') {
      callback({ status: "ok", time: new Date().toISOString() });
    } else {
      socket.emit("pong", { status: "ok", time: new Date().toISOString() });
    }
  });

  // Handle disconnection
  socket.on("disconnect", (reason) => {
    console.log(`User disconnected: ${socket.id}, reason: ${reason}`);
  });
});

/**
 * Start the HTTP server on the specified port
 * @listens {number} process.env.PORT - Port number from environment variables
 */
server.listen(process.env.PORT, () => {
  console.log(`Server running at http://localhost:${process.env.PORT}`);
  console.log(`GraphQL endpoint: http://localhost:${process.env.PORT}/graphql`);
  console.log(`Socket.IO enabled for real-time chat`);
});
