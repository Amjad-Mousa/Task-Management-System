/**
 * Define GraphQL Root Mutation type
 * Combines all mutation fields from different schema modules
 * @type {GraphQLObjectType}
 */
const RootMutation = new GraphQLObjectType({
  name: "RootMutation",
  fields: {
    ...userMutationFields,
    ...authMutationFields,
    ...studentMutationFields,
    ...adminMutationFields,
    ...projectMutationFields,
    ...taskMutationFields,
    ...messageMutationFields,
  },
});

/**
 * Create the GraphQL schema with query and mutation types
 * @type {GraphQLSchema}
 */
const schema = new GraphQLSchema({
  query: RootQuery,
  mutation: RootMutation,
});

/**
 * Set up GraphQL HTTP handler at /graphql endpoint
 * Includes context with request and response objects for authentication
 */
app.use("/graphql", (req, res, next) => {
  const handler = createHandler({
    schema,
    context: () => {
      // Include both request and response in context
      return { req: { ...req, res } };
    },
    formatError: (error) => {
      console.error(error);
      return {
        message: error.message,
        locations: error.locations,
        path: error.path,
      };
    },
  });

  handler(req, res, next);
});

/**
 * Serve Ruru GraphQL IDE at the root endpoint
 * Provides a visual interface for exploring and testing the GraphQL API
 */
const { ruruHTML } = require("ruru/server");
app.get("/", (_req, res) => {
  res.type("html");
  res.end(ruruHTML({ endpoint: "/graphql" }));
});

/**
 * Set up Socket.IO event handlers for real-time chat
 */
io.on("connection", (socket) => {
  console.log(`User connected: ${socket.id}`);

  // Send a welcome message to confirm connection
  socket.emit("welcome", { message: "Connected to chat server successfully!" });

  // Handle errors
  socket.on("error", (error) => {
    console.error(`Socket ${socket.id} error:`, error);
  });

  // Join a chat room (based on conversation between two users)
  socket.on("join_chat", (data) => {
    try {
      const { chatId } = data;
      socket.join(chatId);
      console.log(`User ${socket.id} joined chat: ${chatId}`);

      // Confirm to the client that they joined the chat
      socket.emit("chat_joined", { chatId, success: true });
    } catch (error) {
      console.error(`Error joining chat:`, error);
      socket.emit("chat_joined", { success: false, error: error.message });
    }
  });

  // Handle sending messages
  socket.on("send_message", (data) => {
    try {
      const { chatId, message } = data;
      console.log(`Received message for chat ${chatId}:`, message);

      // Broadcast the message to all users in the chat room
      io.to(chatId).emit("receive_message", message);
      console.log(`Message broadcast to chat ${chatId}`);
    } catch (error) {
      console.error(`Error sending message:`, error);
      socket.emit("message_error", { error: error.message });
    }
  });
